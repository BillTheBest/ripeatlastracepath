#!/usr/bin/python

# Copyright (c) 2014 Pier Carlo Chiodi - http://www.pierky.com
# Licensed under The MIT License (MIT) - http://opensource.org/licenses/MIT
#
# The MIT License (MIT)
# =====================
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# Part of this work is based on Raphael JavaScript Library by Dmitry Baranovskiy 
# (http://raphaeljs.com/) and Dracula Graph Library by Johann Philipp Strathausen
# (http://www.graphdracula.net/).

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import os

CGI = 'REQUEST_METHOD' in os.environ

if CGI:
	import cgitb
	cgitb.enable()

import getopt
import json
import urllib
import ipdetailscache		# https://github.com/pierky/ipdetailscache - wget https://github.com/pierky/ipdetailscache/raw/master/ipdetailscache.py

__version__ = "0.1"

# Data directory
# ==============
# Path where measurements and IP caches are stored. Read and write permissions required.
# When in CGI mode, verify that web server process can read from and write to this directory.
# No trailing /.
DATA_DIR = "/opt/ripeatlastracepath"

# JavaScript libraries (CGI mode only)
# ====================================
# JavaScript libraries are needed to draw the AS path graph; they are:
#	- http://raphaeljs.com/		(raphaeljs/raphael-min.js)
# 	- http://www.graphdracula.net/	(graphdracula/dracula_graffle.js and graphdracula/dracula_graph.js).
#
# This is the base URL where .js files are loaded from.
# With trailing /.
JS_BASE_PATH = "js/"

# ######################################################################################

APIKey				= ""
MeasurementID			= 0
ASPathRadiusFromTarget		= 3
AlsoIncludeIncompletePaths	= False
ForceDownload			= False

def PrintNoNewLine(s):
	sys.stdout.write( s )
def PrintLine(s):
	print(s)
def Usage():
	PrintLine("")
	PrintLine("ripeatlastracepath %s, Copyright (c) 2014 Pier Carlo Chiodi - http://www.pierky.com" % __version__)
	PrintLine("")
	PrintLine("Usage: %s [-k api_key ] [-r radius] [-i] [-f] measurement_id" % ( sys.argv[0] ) )
	PrintLine("")
	PrintLine("Options:")
	PrintLine("	-k	RIPEAtlas API key to access the measurement")
	PrintLine("	-r	Number of ASes from the target to summarize paths (default: 3)")
	PrintLine("	-i	Include paths from probes which did not complete the traceroute")
	PrintLine("	-f	Skip local measurement cache and force its download")
	PrintLine("")
def PrintFooter():
	PrintLine("""
<hr>
<center>
Copyright (c) 2014 Pier Carlo Chiodi - <a href="http://www.pierky.com" target="_blank">http://www.pierky.com</a><br>
Licensed under The MIT License (MIT) - <a href="http://opensource.org/licenses/MIT" target="_blank">http://opensource.org/licenses/MIT</a>
</center>
	""")

	PrintLine("</body>")
	PrintLine("</html>")

	# comment to fix editor bug in syntax colors """

# ######################################################################################

if not CGI:
	try:
		opts, args = getopt.getopt(sys.argv[1:],"hifr:k:")
		for opt, arg in opts:
			if opt == "-r":
				if( arg.isdigit() ):
					ASPathRadiusFromTarget = int( arg )
					if ASPathRadiusFromTarget <= 0:
						PrintLine( "Radius must be > 0" )
						Usage()
						quit()
				else:
					PrintLine( "Number expected for -r option" )
					Usage()
					quit()

			elif opt == "-k":
				APIKey = arg

			elif opt == "-i":
				AlsoIncludeIncompletePaths = True

			elif opt == "-f":
				ForceDownload = True

			elif opt == "-h":
				Usage()
				quit()

			else:
				PrintLine( "Unexpected option: %s" % opt )
				Usage()
				quit()

		if len(args) < 1:
			PrintLine( "Measurement ID not specified" )
			Usage()
			quit()
		else:
			if args[0].isdigit():
				MeasurementID = int(args[0])
				if MeasurementID <= 0:
					PrintLine("Measurement ID must be > 0")
					Usage()
					quit()
			else:
				PrintLine( "Number expected for measurement ID" )
				Usage()
				quit()

	except getopt.GetoptError:
		Usage()
else:
	
	PrintLine("Content-Type: text/html;charset=utf-8")
	PrintLine("")
	PrintLine("""
<html>
<head>
	<script type="text/javascript" src="//code.jquery.com/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" src="%(JS_BASE_PATH)sraphaeljs/raphael-min.js"></script>
	<script type="text/javascript" src="%(JS_BASE_PATH)sgraphdracula/dracula_graffle.js"></script>
	<script type="text/javascript" src="%(JS_BASE_PATH)sgraphdracula/dracula_graph.js"></script>
	<style type="text/css">
		body { font-family:monospace; }

		#tip { position: absolute; border: 1px solid gray; background-color: #efefef; padding: 3px; z-index: 1000; display: none }
 	</style>
	<script>
		function ShowAllProbes() {
			if ( $("#probes").is(":visible") ) {
				$("#probes").hide();
				$("#showallprobes").text("Show all probes");
			} else {
				$("#probes").show();
				$("#showallprobes").text("Hide probes");
			}
		}
	</script>
</head>
<body>
<center><h1>ripeatlastracepath %(VERSION)s</h1></center>

<div id="tip"></div>""" % { "JS_BASE_PATH":JS_BASE_PATH, "VERSION":__version__ } )

	# comment to fix editor bug in syntax colors """

	InputOK = True

	if "QUERY_STRING" in os.environ:
		QS = os.environ["QUERY_STRING"].split("&")

		for KeyValue in QS:
			if "=" in KeyValue:
				Key = KeyValue.split("=")[0]		
				Value = KeyValue.split("=")[1]

				if Key == "m":
					if Value.isdigit():
						MeasurementID = int(Value)
						if MeasurementID  <= 0:
							PrintLine("Measurement ID must be > 0<br>")
							InputOK = False
					else:
						PrintLine("Number expected for measurement ID<br>")
						InputOK = False

				elif Key == "k":
					APIKey = Value

				elif Key == "r":
					if Value.isdigit():
						ASPathRadiusFromTarget = int(Value)
						if ASPathRadiusFromTarget <= 0:
							PrintLine("Radius must be > 0<br>")
							InputOK = False
					else:
						PrintLine("Number expected for AS path radius<br>")
						InputOK = False

				elif Key == "i":
					if Value != "":
						AlsoIncludeIncompletePaths = True

				elif Key == "f":
					if Value != "":
						ForceDownload = True

	if AlsoIncludeIncompletePaths:
		INCOMPLETE_PATHS_CHECKED = "checked"
	else:
		INCOMPLETE_PATHS_CHECKED = ""

	PrintLine("<form action=\"%s\" method=\"GET\">" % os.environ["SCRIPT_NAME"] )
	PrintLine("Measurement ID: <input type=\"text\" name=\"m\" size=\"10\" value=\"%d\"><br>" % MeasurementID)
	PrintLine("API key: <input type=\"text\" name=\"k\" size=\"40\" value=\"%s\"><br>" % APIKey)
	PrintLine("AS path radius from target: <input type=\"text\" name=\"r\" size=\"5\" value=\"%d\"><br>" % ASPathRadiusFromTarget)
	PrintLine("Also include incomplete paths: <input type=\"checkbox\" name=\"i\" value=\"1\" %s><br>" % INCOMPLETE_PATHS_CHECKED)
	PrintLine("Skip measurement cache and force download: <input type=\"checkbox\" name=\"f\" value=\"1\"> (next time only)<br>")
	PrintLine("<input type=\"submit\">")
	PrintLine("<center>")
	PrintLine("<em>Measurements which are downloaded for the first time may require long time for processing, the web server may raise a timeout error.</em><br>")
	PrintLine("<em>To avoid this problem, run the script from the command line.</em>")
	PrintLine("</center>")
	PrintLine("</form>")

	# comment to fix editor bug in syntax colors """

	if MeasurementID == 0 or not InputOK:
		PrintFooter()
		quit()

# ------------------------------------------------------------------

try:
	IPCache = ipdetailscache.IPDetailsCache( Debug = False, IP_ADDRESSES_CACHE_FILE = "%s/ip_addr.cache" % DATA_DIR, IP_PREFIXES_CACHE_FILE = "%s/ip_pref.cache" % DATA_DIR );
except:
	PrintLine("Error opening the IP details cache. Verify write permissions on %s for the running user." % DATA_DIR)
	quit()

DataOK = False

if not ( ForceDownload ):
	try:
		json_data = open( "%s/m%s.json" % ( DATA_DIR, MeasurementID ) )
		data = json.load( json_data )
		json_data.close()
		DataOK = True
	except:
		pass

if( not DataOK ):
	try:
		urllib.urlretrieve( "https://atlas.ripe.net/api/v1/measurement/%s/result/?key=%s" % ( MeasurementID, APIKey ), "%s/m%s.json" % ( DATA_DIR, MeasurementID ) )
	except:
		PrintLine("Can't download measurement results.")
		PrintLine("Verify that measurement ID (%d) is correct and that measurement is public, otherwise set the correct API key with -k option." % ( MeasurementID ) );
		PrintLine("Check also that local directory (%s) has write permissions for the current user." % DATA_DIR)
		quit()

	try:
		json_data = open( "%s/m%s.json" % ( DATA_DIR, MeasurementID ) )
		data = json.load( json_data )
		json_data.close()

		DataOK = True
	except:
		pass

if( not DataOK ):
	PrintLine("Can't get JSON data.")
	quit()	

# ------------------------------------------------------------------

Rows			= []
ASPaths			= []	# [ [ { "ASN": xxx, "Holder": "xxx" }, ... ] ]
InvalidProbes		= []
ProbesWithErrors	= []
IncompleteProbes	= []
ValidProbesCount	= 0	# only results with one or more IP addresses different from both the source and the target in the middle of the path are considered valid

for result in data:

	IPAddress = result["from"]
	if IPAddress == "":
		IPAddress = result["src_addr"]

	if IPAddress == "":
		continue

	ASPath = []
	TracerouteCompleted = False
	Valid = False

	IPAddressDetails = IPCache.GetIPInformation( IPAddress )
	ASPath.append( { "ASN": IPAddressDetails["ASN"], "Holder": IPAddressDetails["Holder"] } )

	Cols = []

	Cols.append( result["prb_id"] )
	Cols.append( "{: <5}".format("From") )
	Cols.append( IPAddress )
	Cols.append( IPAddressDetails["ASN"] )
	Cols.append( IPAddressDetails["Holder"] )
	Cols.append( IPAddressDetails["Prefix"] )
	Cols.append( IPAddressDetails["HostName"] )
	Rows.append( Cols )

	for hop in result["result"]:
		if hop.get("error","") == "":
			LastIPAddress = ""
			for response in hop["result"]:
				if response.get("from","") != "":
					IPAddress = response["from"]

					Valid = Valid or ( ( IPAddress != result["from"] ) and ( IPAddress != result["dst_addr"] ) )

					if IPAddress != LastIPAddress:
						IPAddressDetails = IPCache.GetIPInformation( IPAddress )

						if IPAddressDetails["ASN"].isdigit():
							if not ( IPAddressDetails["ASN"] in [ AS["ASN"] for AS in ASPath ] ):
								ASPath.append( { "ASN": IPAddressDetails["ASN"], "Holder": IPAddressDetails["Holder"] } )

						Cols = []

						Cols.append( result["prb_id"] )

						# traceroute complete?
						if result["dst_addr"] == IPAddress:
							TracerouteCompleted = True
							Cols.append( "{:<5}".format("To") )
						else:
							Cols.append( " {:2d}. ".format( hop["hop"] ) )

						Cols.append( IPAddress )
						Cols.append( IPAddressDetails["ASN"] )
						Cols.append( IPAddressDetails["Holder"] )
						Cols.append( IPAddressDetails["Prefix"] )
						Cols.append( IPAddressDetails["HostName"] )
						Rows.append( Cols )

						LastIPAddress = IPAddress

		else:
			ProbesWithErrors.append( result["prb_id"] )
			break

	if not result["prb_id"] in ProbesWithErrors:
		if Valid:
			if not TracerouteCompleted:
				IncompleteProbes.append( result["prb_id"] )

			if ASPath != []:
				if TracerouteCompleted or AlsoIncludeIncompletePaths:
					ValidProbesCount = ValidProbesCount + 1
					ASPaths.append( ASPath )
		else:
			InvalidProbes.append( result["prb_id"] )

	if not(CGI):
		sys.stdout.write("\rProcessed probes: %d valid, %d with errors, %d incomplete paths" % ( ValidProbesCount, len(ProbesWithErrors), len(IncompleteProbes) ) )
		sys.stdout.flush()

if not(CGI):
	sys.stdout.write("\r")
	PrintLine("")

# ------------------------------------------------------------------

if CGI:
	PrintLine("""<a id="showallprobes" href="javascript:ShowAllProbes()">Show all probes</a>""")

	# comment to fix editor bug in syntax colors """

	PrintLine("<pre>")
	PrintLine("""<div id=probes style="DISPLAY:none">""")

	# comment to fix editor bug in syntax colors """

ColsMaxLen = []
for Col in zip(*Rows):
	ColsMaxLen.append( max( len( str(Val) ) for Val in Col ) )

LastProbeID = 0
LastASN = ""

for R in Rows:
	if R[0] != LastProbeID:
		if LastProbeID != 0:
			if LastProbeID in ProbesWithErrors:
				PrintLine("")
				PrintLine("  With errors")
			else:
				if LastProbeID in InvalidProbes:
					PrintLine("")
					PrintLine("  Invalid")
				else:
					if LastProbeID in IncompleteProbes:
						PrintLine("")
						PrintLine("  Incomplete")
			PrintLine("")

		LastProbeID = R[0]

		LastASN = ""

		PrintLine( "Probe %s" % LastProbeID )
		PrintLine( "" )

	if R[3] != "unknown":
		if R[3] != LastASN:
			if LastASN != "":
				PrintLine("")

			if R[4] != "":
				PrintLine( "  ASN %s - %s" % ( R[3], R[4] ) )
			else:
				PrintLine( "  ASN %s" % R[3] )

		LastASN = R[3]

	PrintNoNewLine( "    %s" % R[1] )					# hop n.
	PrintNoNewLine( ("{: >%d}" % ColsMaxLen[2]).format( R[2] ) )		# IP
	if R[5] != "":
		PrintNoNewLine( (" - {: >%d}" % ColsMaxLen[5]).format( R[5] ) )	# Prefix
	if R[6] != "unknown" and R[6] != "":
		PrintLine( ", %s" % R[6] )					# Hostname
	else:
		PrintLine("")

if CGI:
	PrintLine("</div>")
	PrintLine("<hr>")
else:
	PrintLine("")

if len(IncompleteProbes) > 0:
	PrintLine("Valid probes: %s - %s incomplete (%s)" % ( ValidProbesCount, len(IncompleteProbes), ", ".join(map(str,IncompleteProbes)) ) )
else:
	PrintLine("Valid probes: %s" % ValidProbesCount)
PrintLine("")

if len(InvalidProbes) > 0:
	PrintLine("Invalid probes: %s (%s)" % ( len(InvalidProbes), ", ".join(map(str,InvalidProbes)) ) )
	PrintLine("")
if len(ProbesWithErrors) > 0:
	PrintLine("Probes with errors: %s (%s)" % ( len(ProbesWithErrors), ", ".join(map(str,ProbesWithErrors)) ) )
	PrintLine("")

# ------------------------------------------------------------------

PrintLine("Considering the last %d ASes for each path, this is the number of probes which reach the target through them:" %ASPathRadiusFromTarget )

SelectedASPaths = [ ASPath[-ASPathRadiusFromTarget:] for ASPath in ASPaths ]
DistinctASPaths = []
for ASPath in SelectedASPaths:
	if not ASPath in DistinctASPaths:
		DistinctASPaths.append( ASPath )

Rows = []
LastRowID = 0
for ASPath in DistinctASPaths:
	LastRowID = LastRowID + 1

	for AS in ASPath:
		Cols = []
		Cols.append( LastRowID )
		Cols.append( "%d probes" % SelectedASPaths.count(ASPath) )
		Cols.append( AS["ASN"] )
		Cols.append( AS["Holder"] )
		Rows.append( Cols )

ColsMaxLen = []
for Col in zip(*Rows):
        ColsMaxLen.append( max( len(str(Val)) for Val in Col ) )

LastRowID = 0
for R in Rows:
	if R[0] != LastRowID:
		PrintLine("")
		PrintNoNewLine( ("{: >%d}: " % ColsMaxLen[1]).format(R[1]) )
		LastRowID = R[0]
	else:
		PrintNoNewLine( ("{: >%d}  " % ColsMaxLen[1]).format(" ") )

	PrintNoNewLine( ("{: >%d}, " % ColsMaxLen[2]).format(R[2] ) )
	PrintLine( R[3] )

PrintLine("")

# ------------------------------------------------------------------

if CGI:
	PrintLine("<hr>")

	DistinctASes = []
	for ASPath in DistinctASPaths:
		for AS in ASPath:
			if not ( AS["ASN"] in [ DistinctAS["ASN"] for DistinctAS in DistinctASes ] ):
				DistinctASes.append( AS )

	PrintLine("""
	</pre>

	<div id="canvas" style="height: 1800 px; width: 1000 px;"></div>

	<script type="text/javascript">

		var tip = $("#tip").hide();
		var tipText = "";
		var over = false;
		var renderer;
		var maxProbesCount = 0;
		var mouseHovered = false;
		var mouseHoveredTimeout = null;

		function addTip(shape, node, txt){

			$(shape).mouseenter(function(e){
				tipText = txt;

				if( node.ProbesCount > 0 ) {
					tipText += ' - ' + node.ProbesCount + ' probes';
				}

				$(shape).bind("mousemove", function(e) {
					tip.css("left", e.pageX+20).css("top", e.pageY+20);
				});

				if( mouseHoveredTimeout == null ) {
					mouseHoveredTimeout = setTimeout( function() {
						tip.text(tipText);
						tip.fadeIn();
						mouseHovered = true;
					}, 200 )
				}
			});

			$(shape).mouseleave(function(){
				$(shape).unbind("mousemove");

				if( mouseHovered ) {
					tip.fadeOut(200);
					mouseHovered = true;
				}

				if( mouseHoveredTimeout != null ) {
					clearTimeout(mouseHoveredTimeout);
					mouseHoveredTimeout = null;
				}
			});

		}

		var g = new Graph();
	""")

	# comment to fix editor bug in syntax colors """

	for AS in DistinctASes:
		PrintLine( "		g.addNode('%s');" % ( AS["ASN"] ) )
		PrintLine( "		g.nodes['%s'].ProbesCount = 0;" % AS["ASN"] )

	for ASPath in DistinctASPaths:
		for i in range(0, len(ASPath)-1 ):
			PrintLine( "		g.addEdge('%(A)s', '%(B)s');" % { "A": ASPath[i]["ASN"], "B": ASPath[i+1]["ASN"] } )
			PrintLine( "		g.nodes['%s'].ProbesCount += %d;" % ( ASPath[i]["ASN"], SelectedASPaths.count(ASPath) ) )

	PrintLine("""
		var layouter = new Graph.Layout.Spring(g);
		layouter.layout();

		renderer = new Graph.Renderer.Raphael('canvas', g, 1800, 1000);

		renderer.draw();""")

	# comment to fix editor bug in syntax colors """

	for AS in DistinctASes:
		PrintLine( "		addTip( $('ellipse#%s'), g.nodes[%s], '%s' );" % ( AS["ASN"], AS["ASN"], AS["Holder"].replace("'","") ) )

	PrintLine("""
		for ( n in g.nodes ) {
			if ( g.nodes[n].ProbesCount > maxProbesCount ) {
				maxProbesCount = g.nodes[n].ProbesCount;
			}
		}

		var strokeWidth = 0;
		var strokeStep = Math.round( maxProbesCount / 4 );

		for( n in g.nodes ) {
			if( g.nodes[n].ProbesCount >= 1 ) {
				if ( g.nodes[n].ProbesCount == 1 ) {
					strokeWidth = 1;
				} else if ( g.nodes[n].ProbesCount >= maxProbesCount - strokeStep ) {
					strokeWidth = 5
				} else {
					strokeWidth = Math.floor( g.nodes[n].ProbesCount / strokeStep ) + 2;
				}
				$('ellipse#' + n).css('strokeWidth', strokeWidth + 'px');
			}
		}
	""")

	# comment to fix editor bug in syntax colors """

	PrintLine("</script>")

	PrintFooter()
